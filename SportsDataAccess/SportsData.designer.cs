#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportsDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sports")]
	public partial class SportsDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGameInfo(GameInfo instance);
    partial void UpdateGameInfo(GameInfo instance);
    partial void DeleteGameInfo(GameInfo instance);
    partial void InsertLeagueInfo(LeagueInfo instance);
    partial void UpdateLeagueInfo(LeagueInfo instance);
    partial void DeleteLeagueInfo(LeagueInfo instance);
    partial void InsertTeamInfo(TeamInfo instance);
    partial void UpdateTeamInfo(TeamInfo instance);
    partial void DeleteTeamInfo(TeamInfo instance);
    partial void InsertPlayerInfo(PlayerInfo instance);
    partial void UpdatePlayerInfo(PlayerInfo instance);
    partial void DeletePlayerInfo(PlayerInfo instance);
    partial void InsertWeekInfo(WeekInfo instance);
    partial void UpdateWeekInfo(WeekInfo instance);
    partial void DeleteWeekInfo(WeekInfo instance);
    partial void InsertMatchupInfo(MatchupInfo instance);
    partial void UpdateMatchupInfo(MatchupInfo instance);
    partial void DeleteMatchupInfo(MatchupInfo instance);
    partial void InsertStatAdvPlayerSeason(StatAdvPlayerSeason instance);
    partial void UpdateStatAdvPlayerSeason(StatAdvPlayerSeason instance);
    partial void DeleteStatAdvPlayerSeason(StatAdvPlayerSeason instance);
    partial void InsertStatAdvPlayerWeek(StatAdvPlayerWeek instance);
    partial void UpdateStatAdvPlayerWeek(StatAdvPlayerWeek instance);
    partial void DeleteStatAdvPlayerWeek(StatAdvPlayerWeek instance);
    partial void InsertStatPlayerWeekTotal(StatPlayerWeekTotal instance);
    partial void UpdateStatPlayerWeekTotal(StatPlayerWeekTotal instance);
    partial void DeleteStatPlayerWeekTotal(StatPlayerWeekTotal instance);
    partial void InsertStatTeamWeekTotal(StatTeamWeekTotal instance);
    partial void UpdateStatTeamWeekTotal(StatTeamWeekTotal instance);
    partial void DeleteStatTeamWeekTotal(StatTeamWeekTotal instance);
    partial void InsertNBAWeeklyPlayerStat(NBAWeeklyPlayerStat instance);
    partial void UpdateNBAWeeklyPlayerStat(NBAWeeklyPlayerStat instance);
    partial void DeleteNBAWeeklyPlayerStat(NBAWeeklyPlayerStat instance);
    partial void InsertNBAWeeklyTeamStat(NBAWeeklyTeamStat instance);
    partial void UpdateNBAWeeklyTeamStat(NBAWeeklyTeamStat instance);
    partial void DeleteNBAWeeklyTeamStat(NBAWeeklyTeamStat instance);
    partial void InsertNBAAdvWeeklyPlayerStat(NBAAdvWeeklyPlayerStat instance);
    partial void UpdateNBAAdvWeeklyPlayerStat(NBAAdvWeeklyPlayerStat instance);
    partial void DeleteNBAAdvWeeklyPlayerStat(NBAAdvWeeklyPlayerStat instance);
    partial void InsertNBAAdvTotalPlayerStat(NBAAdvTotalPlayerStat instance);
    partial void UpdateNBAAdvTotalPlayerStat(NBAAdvTotalPlayerStat instance);
    partial void DeleteNBAAdvTotalPlayerStat(NBAAdvTotalPlayerStat instance);
    partial void InsertStatType(StatType instance);
    partial void UpdateStatType(StatType instance);
    partial void DeleteStatType(StatType instance);
    #endregion
		
		public SportsDataDataContext() : 
				base(global::SportsDataAccess.Properties.Settings.Default.SportsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SportsDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<GameInfo> GameInfos
		{
			get
			{
				return this.GetTable<GameInfo>();
			}
		}
		
		public System.Data.Linq.Table<LeagueInfo> LeagueInfos
		{
			get
			{
				return this.GetTable<LeagueInfo>();
			}
		}
		
		public System.Data.Linq.Table<TeamInfo> TeamInfos
		{
			get
			{
				return this.GetTable<TeamInfo>();
			}
		}
		
		public System.Data.Linq.Table<PlayerInfo> PlayerInfos
		{
			get
			{
				return this.GetTable<PlayerInfo>();
			}
		}
		
		public System.Data.Linq.Table<WeekInfo> WeekInfos
		{
			get
			{
				return this.GetTable<WeekInfo>();
			}
		}
		
		public System.Data.Linq.Table<MatchupInfo> MatchupInfos
		{
			get
			{
				return this.GetTable<MatchupInfo>();
			}
		}
		
		public System.Data.Linq.Table<StatAdvPlayerSeason> StatAdvPlayerSeasons
		{
			get
			{
				return this.GetTable<StatAdvPlayerSeason>();
			}
		}
		
		public System.Data.Linq.Table<StatAdvPlayerWeek> StatAdvPlayerWeeks
		{
			get
			{
				return this.GetTable<StatAdvPlayerWeek>();
			}
		}
		
		public System.Data.Linq.Table<StatPlayerWeekTotal> StatPlayerWeekTotals
		{
			get
			{
				return this.GetTable<StatPlayerWeekTotal>();
			}
		}
		
		public System.Data.Linq.Table<StatTeamWeekTotal> StatTeamWeekTotals
		{
			get
			{
				return this.GetTable<StatTeamWeekTotal>();
			}
		}
		
		public System.Data.Linq.Table<NBAWeeklyPlayerStat> NBAWeeklyPlayerStats
		{
			get
			{
				return this.GetTable<NBAWeeklyPlayerStat>();
			}
		}
		
		public System.Data.Linq.Table<NBAWeeklyTeamStat> NBAWeeklyTeamStats
		{
			get
			{
				return this.GetTable<NBAWeeklyTeamStat>();
			}
		}
		
		public System.Data.Linq.Table<NBAAdvWeeklyPlayerStat> NBAAdvWeeklyPlayerStats
		{
			get
			{
				return this.GetTable<NBAAdvWeeklyPlayerStat>();
			}
		}
		
		public System.Data.Linq.Table<NBAAdvTotalPlayerStat> NBAAdvTotalPlayerStats
		{
			get
			{
				return this.GetTable<NBAAdvTotalPlayerStat>();
			}
		}
		
		public System.Data.Linq.Table<StatType> StatTypes
		{
			get
			{
				return this.GetTable<StatType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameInfo")]
	public partial class GameInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _game_key;
		
		private string _game_id;
		
		private string _name;
		
		private string _code;
		
		private string _season;
		
		private EntitySet<LeagueInfo> _LeagueInfos;
		
		private EntitySet<PlayerInfo> _PlayerInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongame_keyChanging(string value);
    partial void Ongame_keyChanged();
    partial void Ongame_idChanging(string value);
    partial void Ongame_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnseasonChanging(string value);
    partial void OnseasonChanged();
    #endregion
		
		public GameInfo()
		{
			this._LeagueInfos = new EntitySet<LeagueInfo>(new Action<LeagueInfo>(this.attach_LeagueInfos), new Action<LeagueInfo>(this.detach_LeagueInfos));
			this._PlayerInfos = new EntitySet<PlayerInfo>(new Action<PlayerInfo>(this.attach_PlayerInfos), new Action<PlayerInfo>(this.detach_PlayerInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string game_key
		{
			get
			{
				return this._game_key;
			}
			set
			{
				if ((this._game_key != value))
				{
					this.Ongame_keyChanging(value);
					this.SendPropertyChanging();
					this._game_key = value;
					this.SendPropertyChanged("game_key");
					this.Ongame_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_id", DbType="NVarChar(50)")]
		public string game_id
		{
			get
			{
				return this._game_id;
			}
			set
			{
				if ((this._game_id != value))
				{
					this.Ongame_idChanging(value);
					this.SendPropertyChanging();
					this._game_id = value;
					this.SendPropertyChanged("game_id");
					this.Ongame_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NVarChar(50)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_season", DbType="NVarChar(50)")]
		public string season
		{
			get
			{
				return this._season;
			}
			set
			{
				if ((this._season != value))
				{
					this.OnseasonChanging(value);
					this.SendPropertyChanging();
					this._season = value;
					this.SendPropertyChanged("season");
					this.OnseasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameInfo_LeagueInfo", Storage="_LeagueInfos", ThisKey="game_key", OtherKey="game_key")]
		public EntitySet<LeagueInfo> LeagueInfos
		{
			get
			{
				return this._LeagueInfos;
			}
			set
			{
				this._LeagueInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameInfo_PlayerInfo", Storage="_PlayerInfos", ThisKey="game_key", OtherKey="game_key")]
		public EntitySet<PlayerInfo> PlayerInfos
		{
			get
			{
				return this._PlayerInfos;
			}
			set
			{
				this._PlayerInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeagueInfos(LeagueInfo entity)
		{
			this.SendPropertyChanging();
			entity.GameInfo = this;
		}
		
		private void detach_LeagueInfos(LeagueInfo entity)
		{
			this.SendPropertyChanging();
			entity.GameInfo = null;
		}
		
		private void attach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.GameInfo = this;
		}
		
		private void detach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.GameInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueInfo")]
	public partial class LeagueInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _league_key;
		
		private string _league_id;
		
		private string _game_key;
		
		private string _name;
		
		private EntitySet<TeamInfo> _TeamInfos;
		
		private EntitySet<WeekInfo> _WeekInfos;
		
		private EntitySet<MatchupInfo> _MatchupInfos;
		
		private EntitySet<NBAAdvTotalPlayerStat> _NBAAdvTotalPlayerStats;
		
		private EntityRef<GameInfo> _GameInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onleague_keyChanging(string value);
    partial void Onleague_keyChanged();
    partial void Onleague_idChanging(string value);
    partial void Onleague_idChanged();
    partial void Ongame_keyChanging(string value);
    partial void Ongame_keyChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public LeagueInfo()
		{
			this._TeamInfos = new EntitySet<TeamInfo>(new Action<TeamInfo>(this.attach_TeamInfos), new Action<TeamInfo>(this.detach_TeamInfos));
			this._WeekInfos = new EntitySet<WeekInfo>(new Action<WeekInfo>(this.attach_WeekInfos), new Action<WeekInfo>(this.detach_WeekInfos));
			this._MatchupInfos = new EntitySet<MatchupInfo>(new Action<MatchupInfo>(this.attach_MatchupInfos), new Action<MatchupInfo>(this.detach_MatchupInfos));
			this._NBAAdvTotalPlayerStats = new EntitySet<NBAAdvTotalPlayerStat>(new Action<NBAAdvTotalPlayerStat>(this.attach_NBAAdvTotalPlayerStats), new Action<NBAAdvTotalPlayerStat>(this.detach_NBAAdvTotalPlayerStats));
			this._GameInfo = default(EntityRef<GameInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string league_key
		{
			get
			{
				return this._league_key;
			}
			set
			{
				if ((this._league_key != value))
				{
					this.Onleague_keyChanging(value);
					this.SendPropertyChanging();
					this._league_key = value;
					this.SendPropertyChanged("league_key");
					this.Onleague_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_id", DbType="NVarChar(50)")]
		public string league_id
		{
			get
			{
				return this._league_id;
			}
			set
			{
				if ((this._league_id != value))
				{
					this.Onleague_idChanging(value);
					this.SendPropertyChanging();
					this._league_id = value;
					this.SendPropertyChanged("league_id");
					this.Onleague_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_key", DbType="NVarChar(50)")]
		public string game_key
		{
			get
			{
				return this._game_key;
			}
			set
			{
				if ((this._game_key != value))
				{
					if (this._GameInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongame_keyChanging(value);
					this.SendPropertyChanging();
					this._game_key = value;
					this.SendPropertyChanged("game_key");
					this.Ongame_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_TeamInfo", Storage="_TeamInfos", ThisKey="league_key", OtherKey="league_key")]
		public EntitySet<TeamInfo> TeamInfos
		{
			get
			{
				return this._TeamInfos;
			}
			set
			{
				this._TeamInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_WeekInfo", Storage="_WeekInfos", ThisKey="league_key", OtherKey="league_key")]
		public EntitySet<WeekInfo> WeekInfos
		{
			get
			{
				return this._WeekInfos;
			}
			set
			{
				this._WeekInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_MatchupInfo", Storage="_MatchupInfos", ThisKey="league_key", OtherKey="league_key")]
		public EntitySet<MatchupInfo> MatchupInfos
		{
			get
			{
				return this._MatchupInfos;
			}
			set
			{
				this._MatchupInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_NBAAdvTotalPlayerStat", Storage="_NBAAdvTotalPlayerStats", ThisKey="league_key", OtherKey="league_key")]
		public EntitySet<NBAAdvTotalPlayerStat> NBAAdvTotalPlayerStats
		{
			get
			{
				return this._NBAAdvTotalPlayerStats;
			}
			set
			{
				this._NBAAdvTotalPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameInfo_LeagueInfo", Storage="_GameInfo", ThisKey="game_key", OtherKey="game_key", IsForeignKey=true)]
		public GameInfo GameInfo
		{
			get
			{
				return this._GameInfo.Entity;
			}
			set
			{
				GameInfo previousValue = this._GameInfo.Entity;
				if (((previousValue != value) 
							|| (this._GameInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameInfo.Entity = null;
						previousValue.LeagueInfos.Remove(this);
					}
					this._GameInfo.Entity = value;
					if ((value != null))
					{
						value.LeagueInfos.Add(this);
						this._game_key = value.game_key;
					}
					else
					{
						this._game_key = default(string);
					}
					this.SendPropertyChanged("GameInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamInfos(TeamInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = this;
		}
		
		private void detach_TeamInfos(TeamInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = null;
		}
		
		private void attach_WeekInfos(WeekInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = this;
		}
		
		private void detach_WeekInfos(WeekInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = null;
		}
		
		private void attach_MatchupInfos(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = this;
		}
		
		private void detach_MatchupInfos(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = null;
		}
		
		private void attach_NBAAdvTotalPlayerStats(NBAAdvTotalPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = this;
		}
		
		private void detach_NBAAdvTotalPlayerStats(NBAAdvTotalPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.LeagueInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamInfo")]
	public partial class TeamInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _team_key;
		
		private string _team_id;
		
		private string _league_key;
		
		private string _name;
		
		private string _manager;
		
		private EntitySet<MatchupInfo> _MatchupInfos;
		
		private EntitySet<MatchupInfo> _MatchupInfos1;
		
		private EntitySet<NBAWeeklyPlayerStat> _NBAWeeklyPlayerStats;
		
		private EntitySet<NBAWeeklyTeamStat> _NBAWeeklyTeamStats;
		
		private EntitySet<NBAAdvWeeklyPlayerStat> _NBAAdvWeeklyPlayerStats;
		
		private EntityRef<LeagueInfo> _LeagueInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onteam_keyChanging(string value);
    partial void Onteam_keyChanged();
    partial void Onteam_idChanging(string value);
    partial void Onteam_idChanged();
    partial void Onleague_keyChanging(string value);
    partial void Onleague_keyChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnmanagerChanging(string value);
    partial void OnmanagerChanged();
    #endregion
		
		public TeamInfo()
		{
			this._MatchupInfos = new EntitySet<MatchupInfo>(new Action<MatchupInfo>(this.attach_MatchupInfos), new Action<MatchupInfo>(this.detach_MatchupInfos));
			this._MatchupInfos1 = new EntitySet<MatchupInfo>(new Action<MatchupInfo>(this.attach_MatchupInfos1), new Action<MatchupInfo>(this.detach_MatchupInfos1));
			this._NBAWeeklyPlayerStats = new EntitySet<NBAWeeklyPlayerStat>(new Action<NBAWeeklyPlayerStat>(this.attach_NBAWeeklyPlayerStats), new Action<NBAWeeklyPlayerStat>(this.detach_NBAWeeklyPlayerStats));
			this._NBAWeeklyTeamStats = new EntitySet<NBAWeeklyTeamStat>(new Action<NBAWeeklyTeamStat>(this.attach_NBAWeeklyTeamStats), new Action<NBAWeeklyTeamStat>(this.detach_NBAWeeklyTeamStats));
			this._NBAAdvWeeklyPlayerStats = new EntitySet<NBAAdvWeeklyPlayerStat>(new Action<NBAAdvWeeklyPlayerStat>(this.attach_NBAAdvWeeklyPlayerStats), new Action<NBAAdvWeeklyPlayerStat>(this.detach_NBAAdvWeeklyPlayerStats));
			this._LeagueInfo = default(EntityRef<LeagueInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string team_key
		{
			get
			{
				return this._team_key;
			}
			set
			{
				if ((this._team_key != value))
				{
					this.Onteam_keyChanging(value);
					this.SendPropertyChanging();
					this._team_key = value;
					this.SendPropertyChanged("team_key");
					this.Onteam_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_id", DbType="NVarChar(50)")]
		public string team_id
		{
			get
			{
				return this._team_id;
			}
			set
			{
				if ((this._team_id != value))
				{
					this.Onteam_idChanging(value);
					this.SendPropertyChanging();
					this._team_id = value;
					this.SendPropertyChanged("team_id");
					this.Onteam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_key", DbType="NVarChar(50)")]
		public string league_key
		{
			get
			{
				return this._league_key;
			}
			set
			{
				if ((this._league_key != value))
				{
					if (this._LeagueInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onleague_keyChanging(value);
					this.SendPropertyChanging();
					this._league_key = value;
					this.SendPropertyChanged("league_key");
					this.Onleague_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager", DbType="NVarChar(50)")]
		public string manager
		{
			get
			{
				return this._manager;
			}
			set
			{
				if ((this._manager != value))
				{
					this.OnmanagerChanging(value);
					this.SendPropertyChanging();
					this._manager = value;
					this.SendPropertyChanged("manager");
					this.OnmanagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_MatchupInfo", Storage="_MatchupInfos", ThisKey="team_key", OtherKey="team1_key")]
		public EntitySet<MatchupInfo> MatchupInfos
		{
			get
			{
				return this._MatchupInfos;
			}
			set
			{
				this._MatchupInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_MatchupInfo1", Storage="_MatchupInfos1", ThisKey="team_key", OtherKey="team2_key")]
		public EntitySet<MatchupInfo> MatchupInfos1
		{
			get
			{
				return this._MatchupInfos1;
			}
			set
			{
				this._MatchupInfos1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_NBAWeeklyPlayerStat", Storage="_NBAWeeklyPlayerStats", ThisKey="team_key", OtherKey="team_key")]
		public EntitySet<NBAWeeklyPlayerStat> NBAWeeklyPlayerStats
		{
			get
			{
				return this._NBAWeeklyPlayerStats;
			}
			set
			{
				this._NBAWeeklyPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_NBAWeeklyTeamStat", Storage="_NBAWeeklyTeamStats", ThisKey="team_key", OtherKey="team_key")]
		public EntitySet<NBAWeeklyTeamStat> NBAWeeklyTeamStats
		{
			get
			{
				return this._NBAWeeklyTeamStats;
			}
			set
			{
				this._NBAWeeklyTeamStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_NBAAdvWeeklyPlayerStat", Storage="_NBAAdvWeeklyPlayerStats", ThisKey="team_key", OtherKey="team_key")]
		public EntitySet<NBAAdvWeeklyPlayerStat> NBAAdvWeeklyPlayerStats
		{
			get
			{
				return this._NBAAdvWeeklyPlayerStats;
			}
			set
			{
				this._NBAAdvWeeklyPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_TeamInfo", Storage="_LeagueInfo", ThisKey="league_key", OtherKey="league_key", IsForeignKey=true)]
		public LeagueInfo LeagueInfo
		{
			get
			{
				return this._LeagueInfo.Entity;
			}
			set
			{
				LeagueInfo previousValue = this._LeagueInfo.Entity;
				if (((previousValue != value) 
							|| (this._LeagueInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueInfo.Entity = null;
						previousValue.TeamInfos.Remove(this);
					}
					this._LeagueInfo.Entity = value;
					if ((value != null))
					{
						value.TeamInfos.Add(this);
						this._league_key = value.league_key;
					}
					else
					{
						this._league_key = default(string);
					}
					this.SendPropertyChanged("LeagueInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchupInfos(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = this;
		}
		
		private void detach_MatchupInfos(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = null;
		}
		
		private void attach_MatchupInfos1(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo1 = this;
		}
		
		private void detach_MatchupInfos1(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo1 = null;
		}
		
		private void attach_NBAWeeklyPlayerStats(NBAWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = this;
		}
		
		private void detach_NBAWeeklyPlayerStats(NBAWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = null;
		}
		
		private void attach_NBAWeeklyTeamStats(NBAWeeklyTeamStat entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = this;
		}
		
		private void detach_NBAWeeklyTeamStats(NBAWeeklyTeamStat entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = null;
		}
		
		private void attach_NBAAdvWeeklyPlayerStats(NBAAdvWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = this;
		}
		
		private void detach_NBAAdvWeeklyPlayerStats(NBAAdvWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.TeamInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerInfo")]
	public partial class PlayerInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _player_key;
		
		private string _player_id;
		
		private string _game_key;
		
		private string _first_name;
		
		private string _last_name;
		
		private EntitySet<NBAWeeklyPlayerStat> _NBAWeeklyPlayerStats;
		
		private EntitySet<NBAAdvWeeklyPlayerStat> _NBAAdvWeeklyPlayerStats;
		
		private EntitySet<NBAAdvTotalPlayerStat> _NBAAdvTotalPlayerStats;
		
		private EntityRef<GameInfo> _GameInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onplayer_keyChanging(string value);
    partial void Onplayer_keyChanged();
    partial void Onplayer_idChanging(string value);
    partial void Onplayer_idChanged();
    partial void Ongame_keyChanging(string value);
    partial void Ongame_keyChanged();
    partial void Onfirst_nameChanging(string value);
    partial void Onfirst_nameChanged();
    partial void Onlast_nameChanging(string value);
    partial void Onlast_nameChanged();
    #endregion
		
		public PlayerInfo()
		{
			this._NBAWeeklyPlayerStats = new EntitySet<NBAWeeklyPlayerStat>(new Action<NBAWeeklyPlayerStat>(this.attach_NBAWeeklyPlayerStats), new Action<NBAWeeklyPlayerStat>(this.detach_NBAWeeklyPlayerStats));
			this._NBAAdvWeeklyPlayerStats = new EntitySet<NBAAdvWeeklyPlayerStat>(new Action<NBAAdvWeeklyPlayerStat>(this.attach_NBAAdvWeeklyPlayerStats), new Action<NBAAdvWeeklyPlayerStat>(this.detach_NBAAdvWeeklyPlayerStats));
			this._NBAAdvTotalPlayerStats = new EntitySet<NBAAdvTotalPlayerStat>(new Action<NBAAdvTotalPlayerStat>(this.attach_NBAAdvTotalPlayerStats), new Action<NBAAdvTotalPlayerStat>(this.detach_NBAAdvTotalPlayerStats));
			this._GameInfo = default(EntityRef<GameInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string player_key
		{
			get
			{
				return this._player_key;
			}
			set
			{
				if ((this._player_key != value))
				{
					this.Onplayer_keyChanging(value);
					this.SendPropertyChanging();
					this._player_key = value;
					this.SendPropertyChanged("player_key");
					this.Onplayer_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_id", DbType="NVarChar(50)")]
		public string player_id
		{
			get
			{
				return this._player_id;
			}
			set
			{
				if ((this._player_id != value))
				{
					this.Onplayer_idChanging(value);
					this.SendPropertyChanging();
					this._player_id = value;
					this.SendPropertyChanged("player_id");
					this.Onplayer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_game_key", DbType="NVarChar(50)")]
		public string game_key
		{
			get
			{
				return this._game_key;
			}
			set
			{
				if ((this._game_key != value))
				{
					if (this._GameInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongame_keyChanging(value);
					this.SendPropertyChanging();
					this._game_key = value;
					this.SendPropertyChanged("game_key");
					this.Ongame_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_name", DbType="NVarChar(50)")]
		public string first_name
		{
			get
			{
				return this._first_name;
			}
			set
			{
				if ((this._first_name != value))
				{
					this.Onfirst_nameChanging(value);
					this.SendPropertyChanging();
					this._first_name = value;
					this.SendPropertyChanged("first_name");
					this.Onfirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_name", DbType="NVarChar(50)")]
		public string last_name
		{
			get
			{
				return this._last_name;
			}
			set
			{
				if ((this._last_name != value))
				{
					this.Onlast_nameChanging(value);
					this.SendPropertyChanging();
					this._last_name = value;
					this.SendPropertyChanged("last_name");
					this.Onlast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_NBAWeeklyPlayerStat", Storage="_NBAWeeklyPlayerStats", ThisKey="player_key", OtherKey="player_key")]
		public EntitySet<NBAWeeklyPlayerStat> NBAWeeklyPlayerStats
		{
			get
			{
				return this._NBAWeeklyPlayerStats;
			}
			set
			{
				this._NBAWeeklyPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_NBAAdvWeeklyPlayerStat", Storage="_NBAAdvWeeklyPlayerStats", ThisKey="player_key", OtherKey="player_key")]
		public EntitySet<NBAAdvWeeklyPlayerStat> NBAAdvWeeklyPlayerStats
		{
			get
			{
				return this._NBAAdvWeeklyPlayerStats;
			}
			set
			{
				this._NBAAdvWeeklyPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_NBAAdvTotalPlayerStat", Storage="_NBAAdvTotalPlayerStats", ThisKey="player_key", OtherKey="player_key")]
		public EntitySet<NBAAdvTotalPlayerStat> NBAAdvTotalPlayerStats
		{
			get
			{
				return this._NBAAdvTotalPlayerStats;
			}
			set
			{
				this._NBAAdvTotalPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GameInfo_PlayerInfo", Storage="_GameInfo", ThisKey="game_key", OtherKey="game_key", IsForeignKey=true)]
		public GameInfo GameInfo
		{
			get
			{
				return this._GameInfo.Entity;
			}
			set
			{
				GameInfo previousValue = this._GameInfo.Entity;
				if (((previousValue != value) 
							|| (this._GameInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GameInfo.Entity = null;
						previousValue.PlayerInfos.Remove(this);
					}
					this._GameInfo.Entity = value;
					if ((value != null))
					{
						value.PlayerInfos.Add(this);
						this._game_key = value.game_key;
					}
					else
					{
						this._game_key = default(string);
					}
					this.SendPropertyChanged("GameInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NBAWeeklyPlayerStats(NBAWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = this;
		}
		
		private void detach_NBAWeeklyPlayerStats(NBAWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = null;
		}
		
		private void attach_NBAAdvWeeklyPlayerStats(NBAAdvWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = this;
		}
		
		private void detach_NBAAdvWeeklyPlayerStats(NBAAdvWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = null;
		}
		
		private void attach_NBAAdvTotalPlayerStats(NBAAdvTotalPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = this;
		}
		
		private void detach_NBAAdvTotalPlayerStats(NBAAdvTotalPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WeekInfo")]
	public partial class WeekInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _league_key;
		
		private int _week;
		
		private bool _isShortWeek;
		
		private bool _isLongWeek;
		
		private bool _isPlayoffs;
		
		private bool _isConsolation;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private System.Nullable<System.DateTime> _lastLoadDate;
		
		private EntitySet<MatchupInfo> _MatchupInfos;
		
		private EntitySet<NBAWeeklyPlayerStat> _NBAWeeklyPlayerStats;
		
		private EntitySet<NBAWeeklyTeamStat> _NBAWeeklyTeamStats;
		
		private EntitySet<NBAAdvWeeklyPlayerStat> _NBAAdvWeeklyPlayerStats;
		
		private EntityRef<LeagueInfo> _LeagueInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onleague_keyChanging(string value);
    partial void Onleague_keyChanged();
    partial void OnweekChanging(int value);
    partial void OnweekChanged();
    partial void OnisShortWeekChanging(bool value);
    partial void OnisShortWeekChanged();
    partial void OnisLongWeekChanging(bool value);
    partial void OnisLongWeekChanged();
    partial void OnisPlayoffsChanging(bool value);
    partial void OnisPlayoffsChanged();
    partial void OnisConsolationChanging(bool value);
    partial void OnisConsolationChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    partial void OnlastLoadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastLoadDateChanged();
    #endregion
		
		public WeekInfo()
		{
			this._MatchupInfos = new EntitySet<MatchupInfo>(new Action<MatchupInfo>(this.attach_MatchupInfos), new Action<MatchupInfo>(this.detach_MatchupInfos));
			this._NBAWeeklyPlayerStats = new EntitySet<NBAWeeklyPlayerStat>(new Action<NBAWeeklyPlayerStat>(this.attach_NBAWeeklyPlayerStats), new Action<NBAWeeklyPlayerStat>(this.detach_NBAWeeklyPlayerStats));
			this._NBAWeeklyTeamStats = new EntitySet<NBAWeeklyTeamStat>(new Action<NBAWeeklyTeamStat>(this.attach_NBAWeeklyTeamStats), new Action<NBAWeeklyTeamStat>(this.detach_NBAWeeklyTeamStats));
			this._NBAAdvWeeklyPlayerStats = new EntitySet<NBAAdvWeeklyPlayerStat>(new Action<NBAAdvWeeklyPlayerStat>(this.attach_NBAAdvWeeklyPlayerStats), new Action<NBAAdvWeeklyPlayerStat>(this.detach_NBAAdvWeeklyPlayerStats));
			this._LeagueInfo = default(EntityRef<LeagueInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string league_key
		{
			get
			{
				return this._league_key;
			}
			set
			{
				if ((this._league_key != value))
				{
					if (this._LeagueInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onleague_keyChanging(value);
					this.SendPropertyChanging();
					this._league_key = value;
					this.SendPropertyChanged("league_key");
					this.Onleague_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_week", DbType="Int NOT NULL")]
		public int week
		{
			get
			{
				return this._week;
			}
			set
			{
				if ((this._week != value))
				{
					this.OnweekChanging(value);
					this.SendPropertyChanging();
					this._week = value;
					this.SendPropertyChanged("week");
					this.OnweekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isShortWeek", DbType="Bit NOT NULL")]
		public bool isShortWeek
		{
			get
			{
				return this._isShortWeek;
			}
			set
			{
				if ((this._isShortWeek != value))
				{
					this.OnisShortWeekChanging(value);
					this.SendPropertyChanging();
					this._isShortWeek = value;
					this.SendPropertyChanged("isShortWeek");
					this.OnisShortWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isLongWeek", DbType="Bit NOT NULL")]
		public bool isLongWeek
		{
			get
			{
				return this._isLongWeek;
			}
			set
			{
				if ((this._isLongWeek != value))
				{
					this.OnisLongWeekChanging(value);
					this.SendPropertyChanging();
					this._isLongWeek = value;
					this.SendPropertyChanged("isLongWeek");
					this.OnisLongWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPlayoffs", DbType="Bit NOT NULL")]
		public bool isPlayoffs
		{
			get
			{
				return this._isPlayoffs;
			}
			set
			{
				if ((this._isPlayoffs != value))
				{
					this.OnisPlayoffsChanging(value);
					this.SendPropertyChanging();
					this._isPlayoffs = value;
					this.SendPropertyChanged("isPlayoffs");
					this.OnisPlayoffsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConsolation", DbType="Bit NOT NULL")]
		public bool isConsolation
		{
			get
			{
				return this._isConsolation;
			}
			set
			{
				if ((this._isConsolation != value))
				{
					this.OnisConsolationChanging(value);
					this.SendPropertyChanging();
					this._isConsolation = value;
					this.SendPropertyChanged("isConsolation");
					this.OnisConsolationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL")]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLoadDate", DbType="Date")]
		public System.Nullable<System.DateTime> lastLoadDate
		{
			get
			{
				return this._lastLoadDate;
			}
			set
			{
				if ((this._lastLoadDate != value))
				{
					this.OnlastLoadDateChanging(value);
					this.SendPropertyChanging();
					this._lastLoadDate = value;
					this.SendPropertyChanged("lastLoadDate");
					this.OnlastLoadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_MatchupInfo", Storage="_MatchupInfos", ThisKey="id", OtherKey="week_id")]
		public EntitySet<MatchupInfo> MatchupInfos
		{
			get
			{
				return this._MatchupInfos;
			}
			set
			{
				this._MatchupInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_NBAWeeklyPlayerStat", Storage="_NBAWeeklyPlayerStats", ThisKey="id", OtherKey="week_id")]
		public EntitySet<NBAWeeklyPlayerStat> NBAWeeklyPlayerStats
		{
			get
			{
				return this._NBAWeeklyPlayerStats;
			}
			set
			{
				this._NBAWeeklyPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_NBAWeeklyTeamStat", Storage="_NBAWeeklyTeamStats", ThisKey="id", OtherKey="week_id")]
		public EntitySet<NBAWeeklyTeamStat> NBAWeeklyTeamStats
		{
			get
			{
				return this._NBAWeeklyTeamStats;
			}
			set
			{
				this._NBAWeeklyTeamStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_NBAAdvWeeklyPlayerStat", Storage="_NBAAdvWeeklyPlayerStats", ThisKey="id", OtherKey="week_id")]
		public EntitySet<NBAAdvWeeklyPlayerStat> NBAAdvWeeklyPlayerStats
		{
			get
			{
				return this._NBAAdvWeeklyPlayerStats;
			}
			set
			{
				this._NBAAdvWeeklyPlayerStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_WeekInfo", Storage="_LeagueInfo", ThisKey="league_key", OtherKey="league_key", IsForeignKey=true)]
		public LeagueInfo LeagueInfo
		{
			get
			{
				return this._LeagueInfo.Entity;
			}
			set
			{
				LeagueInfo previousValue = this._LeagueInfo.Entity;
				if (((previousValue != value) 
							|| (this._LeagueInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueInfo.Entity = null;
						previousValue.WeekInfos.Remove(this);
					}
					this._LeagueInfo.Entity = value;
					if ((value != null))
					{
						value.WeekInfos.Add(this);
						this._league_key = value.league_key;
					}
					else
					{
						this._league_key = default(string);
					}
					this.SendPropertyChanged("LeagueInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchupInfos(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = this;
		}
		
		private void detach_MatchupInfos(MatchupInfo entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = null;
		}
		
		private void attach_NBAWeeklyPlayerStats(NBAWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = this;
		}
		
		private void detach_NBAWeeklyPlayerStats(NBAWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = null;
		}
		
		private void attach_NBAWeeklyTeamStats(NBAWeeklyTeamStat entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = this;
		}
		
		private void detach_NBAWeeklyTeamStats(NBAWeeklyTeamStat entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = null;
		}
		
		private void attach_NBAAdvWeeklyPlayerStats(NBAAdvWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = this;
		}
		
		private void detach_NBAAdvWeeklyPlayerStats(NBAAdvWeeklyPlayerStat entity)
		{
			this.SendPropertyChanging();
			entity.WeekInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchupInfo")]
	public partial class MatchupInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _week_id;
		
		private string _league_key;
		
		private string _team1_key;
		
		private string _team2_key;
		
		private EntityRef<LeagueInfo> _LeagueInfo;
		
		private EntityRef<TeamInfo> _TeamInfo;
		
		private EntityRef<TeamInfo> _TeamInfo1;
		
		private EntityRef<WeekInfo> _WeekInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onweek_idChanging(int value);
    partial void Onweek_idChanged();
    partial void Onleague_keyChanging(string value);
    partial void Onleague_keyChanged();
    partial void Onteam1_keyChanging(string value);
    partial void Onteam1_keyChanged();
    partial void Onteam2_keyChanging(string value);
    partial void Onteam2_keyChanged();
    #endregion
		
		public MatchupInfo()
		{
			this._LeagueInfo = default(EntityRef<LeagueInfo>);
			this._TeamInfo = default(EntityRef<TeamInfo>);
			this._TeamInfo1 = default(EntityRef<TeamInfo>);
			this._WeekInfo = default(EntityRef<WeekInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_week_id", DbType="Int NOT NULL")]
		public int week_id
		{
			get
			{
				return this._week_id;
			}
			set
			{
				if ((this._week_id != value))
				{
					if (this._WeekInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweek_idChanging(value);
					this.SendPropertyChanging();
					this._week_id = value;
					this.SendPropertyChanged("week_id");
					this.Onweek_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string league_key
		{
			get
			{
				return this._league_key;
			}
			set
			{
				if ((this._league_key != value))
				{
					if (this._LeagueInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onleague_keyChanging(value);
					this.SendPropertyChanging();
					this._league_key = value;
					this.SendPropertyChanged("league_key");
					this.Onleague_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team1_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string team1_key
		{
			get
			{
				return this._team1_key;
			}
			set
			{
				if ((this._team1_key != value))
				{
					if (this._TeamInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam1_keyChanging(value);
					this.SendPropertyChanging();
					this._team1_key = value;
					this.SendPropertyChanged("team1_key");
					this.Onteam1_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team2_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string team2_key
		{
			get
			{
				return this._team2_key;
			}
			set
			{
				if ((this._team2_key != value))
				{
					if (this._TeamInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam2_keyChanging(value);
					this.SendPropertyChanging();
					this._team2_key = value;
					this.SendPropertyChanged("team2_key");
					this.Onteam2_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_MatchupInfo", Storage="_LeagueInfo", ThisKey="league_key", OtherKey="league_key", IsForeignKey=true)]
		public LeagueInfo LeagueInfo
		{
			get
			{
				return this._LeagueInfo.Entity;
			}
			set
			{
				LeagueInfo previousValue = this._LeagueInfo.Entity;
				if (((previousValue != value) 
							|| (this._LeagueInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueInfo.Entity = null;
						previousValue.MatchupInfos.Remove(this);
					}
					this._LeagueInfo.Entity = value;
					if ((value != null))
					{
						value.MatchupInfos.Add(this);
						this._league_key = value.league_key;
					}
					else
					{
						this._league_key = default(string);
					}
					this.SendPropertyChanged("LeagueInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_MatchupInfo", Storage="_TeamInfo", ThisKey="team1_key", OtherKey="team_key", IsForeignKey=true)]
		public TeamInfo TeamInfo
		{
			get
			{
				return this._TeamInfo.Entity;
			}
			set
			{
				TeamInfo previousValue = this._TeamInfo.Entity;
				if (((previousValue != value) 
							|| (this._TeamInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamInfo.Entity = null;
						previousValue.MatchupInfos.Remove(this);
					}
					this._TeamInfo.Entity = value;
					if ((value != null))
					{
						value.MatchupInfos.Add(this);
						this._team1_key = value.team_key;
					}
					else
					{
						this._team1_key = default(string);
					}
					this.SendPropertyChanged("TeamInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_MatchupInfo1", Storage="_TeamInfo1", ThisKey="team2_key", OtherKey="team_key", IsForeignKey=true)]
		public TeamInfo TeamInfo1
		{
			get
			{
				return this._TeamInfo1.Entity;
			}
			set
			{
				TeamInfo previousValue = this._TeamInfo1.Entity;
				if (((previousValue != value) 
							|| (this._TeamInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamInfo1.Entity = null;
						previousValue.MatchupInfos1.Remove(this);
					}
					this._TeamInfo1.Entity = value;
					if ((value != null))
					{
						value.MatchupInfos1.Add(this);
						this._team2_key = value.team_key;
					}
					else
					{
						this._team2_key = default(string);
					}
					this.SendPropertyChanged("TeamInfo1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_MatchupInfo", Storage="_WeekInfo", ThisKey="week_id", OtherKey="id", IsForeignKey=true)]
		public WeekInfo WeekInfo
		{
			get
			{
				return this._WeekInfo.Entity;
			}
			set
			{
				WeekInfo previousValue = this._WeekInfo.Entity;
				if (((previousValue != value) 
							|| (this._WeekInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeekInfo.Entity = null;
						previousValue.MatchupInfos.Remove(this);
					}
					this._WeekInfo.Entity = value;
					if ((value != null))
					{
						value.MatchupInfos.Add(this);
						this._week_id = value.id;
					}
					else
					{
						this._week_id = default(int);
					}
					this.SendPropertyChanged("WeekInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatAdvPlayerSeason")]
	public partial class StatAdvPlayerSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _nba_adv_total_player_id;
		
		private int _stat_type_id;
		
		private System.Nullable<decimal> _percentage;
		
		private System.Nullable<decimal> _win;
		
		private System.Nullable<decimal> _win_shares;
		
		private EntityRef<NBAAdvTotalPlayerStat> _NBAAdvTotalPlayerStat;
		
		private EntityRef<StatType> _StatType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onnba_adv_total_player_idChanging(int value);
    partial void Onnba_adv_total_player_idChanged();
    partial void Onstat_type_idChanging(int value);
    partial void Onstat_type_idChanged();
    partial void OnpercentageChanging(System.Nullable<decimal> value);
    partial void OnpercentageChanged();
    partial void OnwinChanging(System.Nullable<decimal> value);
    partial void OnwinChanged();
    partial void Onwin_sharesChanging(System.Nullable<decimal> value);
    partial void Onwin_sharesChanged();
    #endregion
		
		public StatAdvPlayerSeason()
		{
			this._NBAAdvTotalPlayerStat = default(EntityRef<NBAAdvTotalPlayerStat>);
			this._StatType = default(EntityRef<StatType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nba_adv_total_player_id", DbType="Int NOT NULL")]
		public int nba_adv_total_player_id
		{
			get
			{
				return this._nba_adv_total_player_id;
			}
			set
			{
				if ((this._nba_adv_total_player_id != value))
				{
					if (this._NBAAdvTotalPlayerStat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onnba_adv_total_player_idChanging(value);
					this.SendPropertyChanging();
					this._nba_adv_total_player_id = value;
					this.SendPropertyChanged("nba_adv_total_player_id");
					this.Onnba_adv_total_player_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_type_id", DbType="Int NOT NULL")]
		public int stat_type_id
		{
			get
			{
				return this._stat_type_id;
			}
			set
			{
				if ((this._stat_type_id != value))
				{
					if (this._StatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_type_idChanging(value);
					this.SendPropertyChanging();
					this._stat_type_id = value;
					this.SendPropertyChanged("stat_type_id");
					this.Onstat_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentage", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> percentage
		{
			get
			{
				return this._percentage;
			}
			set
			{
				if ((this._percentage != value))
				{
					this.OnpercentageChanging(value);
					this.SendPropertyChanging();
					this._percentage = value;
					this.SendPropertyChanged("percentage");
					this.OnpercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win", DbType="Decimal(3,1)")]
		public System.Nullable<decimal> win
		{
			get
			{
				return this._win;
			}
			set
			{
				if ((this._win != value))
				{
					this.OnwinChanging(value);
					this.SendPropertyChanging();
					this._win = value;
					this.SendPropertyChanged("win");
					this.OnwinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win_shares", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> win_shares
		{
			get
			{
				return this._win_shares;
			}
			set
			{
				if ((this._win_shares != value))
				{
					this.Onwin_sharesChanging(value);
					this.SendPropertyChanging();
					this._win_shares = value;
					this.SendPropertyChanged("win_shares");
					this.Onwin_sharesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAAdvTotalPlayerStat_StatAdvPlayerSeason", Storage="_NBAAdvTotalPlayerStat", ThisKey="nba_adv_total_player_id", OtherKey="id", IsForeignKey=true)]
		public NBAAdvTotalPlayerStat NBAAdvTotalPlayerStat
		{
			get
			{
				return this._NBAAdvTotalPlayerStat.Entity;
			}
			set
			{
				NBAAdvTotalPlayerStat previousValue = this._NBAAdvTotalPlayerStat.Entity;
				if (((previousValue != value) 
							|| (this._NBAAdvTotalPlayerStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NBAAdvTotalPlayerStat.Entity = null;
						previousValue.StatAdvPlayerSeasons.Remove(this);
					}
					this._NBAAdvTotalPlayerStat.Entity = value;
					if ((value != null))
					{
						value.StatAdvPlayerSeasons.Add(this);
						this._nba_adv_total_player_id = value.id;
					}
					else
					{
						this._nba_adv_total_player_id = default(int);
					}
					this.SendPropertyChanged("NBAAdvTotalPlayerStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatAdvPlayerSeason", Storage="_StatType", ThisKey="stat_type_id", OtherKey="stat_type_id", IsForeignKey=true)]
		public StatType StatType
		{
			get
			{
				return this._StatType.Entity;
			}
			set
			{
				StatType previousValue = this._StatType.Entity;
				if (((previousValue != value) 
							|| (this._StatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatType.Entity = null;
						previousValue.StatAdvPlayerSeasons.Remove(this);
					}
					this._StatType.Entity = value;
					if ((value != null))
					{
						value.StatAdvPlayerSeasons.Add(this);
						this._stat_type_id = value.stat_type_id;
					}
					else
					{
						this._stat_type_id = default(int);
					}
					this.SendPropertyChanged("StatType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatAdvPlayerWeek")]
	public partial class StatAdvPlayerWeek : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _nba_adv_weekly_player_id;
		
		private int _stat_type_id;
		
		private System.Nullable<decimal> _percentage;
		
		private System.Nullable<decimal> _win;
		
		private System.Nullable<decimal> _win_share;
		
		private EntityRef<NBAAdvWeeklyPlayerStat> _NBAAdvWeeklyPlayerStat;
		
		private EntityRef<StatType> _StatType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onnba_adv_weekly_player_idChanging(int value);
    partial void Onnba_adv_weekly_player_idChanged();
    partial void Onstat_type_idChanging(int value);
    partial void Onstat_type_idChanged();
    partial void OnpercentageChanging(System.Nullable<decimal> value);
    partial void OnpercentageChanged();
    partial void OnwinChanging(System.Nullable<decimal> value);
    partial void OnwinChanged();
    partial void Onwin_shareChanging(System.Nullable<decimal> value);
    partial void Onwin_shareChanged();
    #endregion
		
		public StatAdvPlayerWeek()
		{
			this._NBAAdvWeeklyPlayerStat = default(EntityRef<NBAAdvWeeklyPlayerStat>);
			this._StatType = default(EntityRef<StatType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nba_adv_weekly_player_id", DbType="Int NOT NULL")]
		public int nba_adv_weekly_player_id
		{
			get
			{
				return this._nba_adv_weekly_player_id;
			}
			set
			{
				if ((this._nba_adv_weekly_player_id != value))
				{
					if (this._NBAAdvWeeklyPlayerStat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onnba_adv_weekly_player_idChanging(value);
					this.SendPropertyChanging();
					this._nba_adv_weekly_player_id = value;
					this.SendPropertyChanged("nba_adv_weekly_player_id");
					this.Onnba_adv_weekly_player_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_type_id", DbType="Int NOT NULL")]
		public int stat_type_id
		{
			get
			{
				return this._stat_type_id;
			}
			set
			{
				if ((this._stat_type_id != value))
				{
					if (this._StatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_type_idChanging(value);
					this.SendPropertyChanging();
					this._stat_type_id = value;
					this.SendPropertyChanged("stat_type_id");
					this.Onstat_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentage", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> percentage
		{
			get
			{
				return this._percentage;
			}
			set
			{
				if ((this._percentage != value))
				{
					this.OnpercentageChanging(value);
					this.SendPropertyChanging();
					this._percentage = value;
					this.SendPropertyChanged("percentage");
					this.OnpercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win", DbType="Decimal(3,1)")]
		public System.Nullable<decimal> win
		{
			get
			{
				return this._win;
			}
			set
			{
				if ((this._win != value))
				{
					this.OnwinChanging(value);
					this.SendPropertyChanging();
					this._win = value;
					this.SendPropertyChanged("win");
					this.OnwinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win_share", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> win_share
		{
			get
			{
				return this._win_share;
			}
			set
			{
				if ((this._win_share != value))
				{
					this.Onwin_shareChanging(value);
					this.SendPropertyChanging();
					this._win_share = value;
					this.SendPropertyChanged("win_share");
					this.Onwin_shareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAAdvWeeklyPlayerStat_StatAdvPlayerWeek", Storage="_NBAAdvWeeklyPlayerStat", ThisKey="nba_adv_weekly_player_id", OtherKey="id", IsForeignKey=true)]
		public NBAAdvWeeklyPlayerStat NBAAdvWeeklyPlayerStat
		{
			get
			{
				return this._NBAAdvWeeklyPlayerStat.Entity;
			}
			set
			{
				NBAAdvWeeklyPlayerStat previousValue = this._NBAAdvWeeklyPlayerStat.Entity;
				if (((previousValue != value) 
							|| (this._NBAAdvWeeklyPlayerStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NBAAdvWeeklyPlayerStat.Entity = null;
						previousValue.StatAdvPlayerWeeks.Remove(this);
					}
					this._NBAAdvWeeklyPlayerStat.Entity = value;
					if ((value != null))
					{
						value.StatAdvPlayerWeeks.Add(this);
						this._nba_adv_weekly_player_id = value.id;
					}
					else
					{
						this._nba_adv_weekly_player_id = default(int);
					}
					this.SendPropertyChanged("NBAAdvWeeklyPlayerStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatAdvPlayerWeek", Storage="_StatType", ThisKey="stat_type_id", OtherKey="stat_type_id", IsForeignKey=true)]
		public StatType StatType
		{
			get
			{
				return this._StatType.Entity;
			}
			set
			{
				StatType previousValue = this._StatType.Entity;
				if (((previousValue != value) 
							|| (this._StatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatType.Entity = null;
						previousValue.StatAdvPlayerWeeks.Remove(this);
					}
					this._StatType.Entity = value;
					if ((value != null))
					{
						value.StatAdvPlayerWeeks.Add(this);
						this._stat_type_id = value.stat_type_id;
					}
					else
					{
						this._stat_type_id = default(int);
					}
					this.SendPropertyChanged("StatType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatPlayerWeekTotal")]
	public partial class StatPlayerWeekTotal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _nba_weekly_player_id;
		
		private int _stat_type_id;
		
		private System.Nullable<int> _total;
		
		private EntityRef<NBAWeeklyPlayerStat> _NBAWeeklyPlayerStat;
		
		private EntityRef<StatType> _StatType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onnba_weekly_player_idChanging(int value);
    partial void Onnba_weekly_player_idChanged();
    partial void Onstat_type_idChanging(int value);
    partial void Onstat_type_idChanged();
    partial void OntotalChanging(System.Nullable<int> value);
    partial void OntotalChanged();
    #endregion
		
		public StatPlayerWeekTotal()
		{
			this._NBAWeeklyPlayerStat = default(EntityRef<NBAWeeklyPlayerStat>);
			this._StatType = default(EntityRef<StatType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nba_weekly_player_id", DbType="Int NOT NULL")]
		public int nba_weekly_player_id
		{
			get
			{
				return this._nba_weekly_player_id;
			}
			set
			{
				if ((this._nba_weekly_player_id != value))
				{
					if (this._NBAWeeklyPlayerStat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onnba_weekly_player_idChanging(value);
					this.SendPropertyChanging();
					this._nba_weekly_player_id = value;
					this.SendPropertyChanged("nba_weekly_player_id");
					this.Onnba_weekly_player_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_type_id", DbType="Int NOT NULL")]
		public int stat_type_id
		{
			get
			{
				return this._stat_type_id;
			}
			set
			{
				if ((this._stat_type_id != value))
				{
					if (this._StatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_type_idChanging(value);
					this.SendPropertyChanging();
					this._stat_type_id = value;
					this.SendPropertyChanged("stat_type_id");
					this.Onstat_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Int")]
		public System.Nullable<int> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAWeeklyPlayerStat_StatPlayerWeekTotal", Storage="_NBAWeeklyPlayerStat", ThisKey="nba_weekly_player_id", OtherKey="id", IsForeignKey=true)]
		public NBAWeeklyPlayerStat NBAWeeklyPlayerStat
		{
			get
			{
				return this._NBAWeeklyPlayerStat.Entity;
			}
			set
			{
				NBAWeeklyPlayerStat previousValue = this._NBAWeeklyPlayerStat.Entity;
				if (((previousValue != value) 
							|| (this._NBAWeeklyPlayerStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NBAWeeklyPlayerStat.Entity = null;
						previousValue.StatPlayerWeekTotals.Remove(this);
					}
					this._NBAWeeklyPlayerStat.Entity = value;
					if ((value != null))
					{
						value.StatPlayerWeekTotals.Add(this);
						this._nba_weekly_player_id = value.id;
					}
					else
					{
						this._nba_weekly_player_id = default(int);
					}
					this.SendPropertyChanged("NBAWeeklyPlayerStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatPlayerWeekTotal", Storage="_StatType", ThisKey="stat_type_id", OtherKey="stat_type_id", IsForeignKey=true)]
		public StatType StatType
		{
			get
			{
				return this._StatType.Entity;
			}
			set
			{
				StatType previousValue = this._StatType.Entity;
				if (((previousValue != value) 
							|| (this._StatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatType.Entity = null;
						previousValue.StatPlayerWeekTotals.Remove(this);
					}
					this._StatType.Entity = value;
					if ((value != null))
					{
						value.StatPlayerWeekTotals.Add(this);
						this._stat_type_id = value.stat_type_id;
					}
					else
					{
						this._stat_type_id = default(int);
					}
					this.SendPropertyChanged("StatType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatTeamWeekTotal")]
	public partial class StatTeamWeekTotal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _nba_weekly_team_id;
		
		private int _stat_type_id;
		
		private System.Nullable<int> _total;
		
		private System.Nullable<bool> _win;
		
		private System.Nullable<bool> _tie;
		
		private EntityRef<NBAWeeklyTeamStat> _NBAWeeklyTeamStat;
		
		private EntityRef<StatType> _StatType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onnba_weekly_team_idChanging(int value);
    partial void Onnba_weekly_team_idChanged();
    partial void Onstat_type_idChanging(int value);
    partial void Onstat_type_idChanged();
    partial void OntotalChanging(System.Nullable<int> value);
    partial void OntotalChanged();
    partial void OnwinChanging(System.Nullable<bool> value);
    partial void OnwinChanged();
    partial void OntieChanging(System.Nullable<bool> value);
    partial void OntieChanged();
    #endregion
		
		public StatTeamWeekTotal()
		{
			this._NBAWeeklyTeamStat = default(EntityRef<NBAWeeklyTeamStat>);
			this._StatType = default(EntityRef<StatType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nba_weekly_team_id", DbType="Int NOT NULL")]
		public int nba_weekly_team_id
		{
			get
			{
				return this._nba_weekly_team_id;
			}
			set
			{
				if ((this._nba_weekly_team_id != value))
				{
					if (this._NBAWeeklyTeamStat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onnba_weekly_team_idChanging(value);
					this.SendPropertyChanging();
					this._nba_weekly_team_id = value;
					this.SendPropertyChanged("nba_weekly_team_id");
					this.Onnba_weekly_team_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_type_id", DbType="Int NOT NULL")]
		public int stat_type_id
		{
			get
			{
				return this._stat_type_id;
			}
			set
			{
				if ((this._stat_type_id != value))
				{
					if (this._StatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstat_type_idChanging(value);
					this.SendPropertyChanging();
					this._stat_type_id = value;
					this.SendPropertyChanged("stat_type_id");
					this.Onstat_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Int")]
		public System.Nullable<int> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win", DbType="Bit")]
		public System.Nullable<bool> win
		{
			get
			{
				return this._win;
			}
			set
			{
				if ((this._win != value))
				{
					this.OnwinChanging(value);
					this.SendPropertyChanging();
					this._win = value;
					this.SendPropertyChanged("win");
					this.OnwinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tie", DbType="Bit")]
		public System.Nullable<bool> tie
		{
			get
			{
				return this._tie;
			}
			set
			{
				if ((this._tie != value))
				{
					this.OntieChanging(value);
					this.SendPropertyChanging();
					this._tie = value;
					this.SendPropertyChanged("tie");
					this.OntieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAWeeklyTeamStat_StatTeamWeekTotal", Storage="_NBAWeeklyTeamStat", ThisKey="nba_weekly_team_id", OtherKey="id", IsForeignKey=true)]
		public NBAWeeklyTeamStat NBAWeeklyTeamStat
		{
			get
			{
				return this._NBAWeeklyTeamStat.Entity;
			}
			set
			{
				NBAWeeklyTeamStat previousValue = this._NBAWeeklyTeamStat.Entity;
				if (((previousValue != value) 
							|| (this._NBAWeeklyTeamStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NBAWeeklyTeamStat.Entity = null;
						previousValue.StatTeamWeekTotals.Remove(this);
					}
					this._NBAWeeklyTeamStat.Entity = value;
					if ((value != null))
					{
						value.StatTeamWeekTotals.Add(this);
						this._nba_weekly_team_id = value.id;
					}
					else
					{
						this._nba_weekly_team_id = default(int);
					}
					this.SendPropertyChanged("NBAWeeklyTeamStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatTeamWeekTotal", Storage="_StatType", ThisKey="stat_type_id", OtherKey="stat_type_id", IsForeignKey=true)]
		public StatType StatType
		{
			get
			{
				return this._StatType.Entity;
			}
			set
			{
				StatType previousValue = this._StatType.Entity;
				if (((previousValue != value) 
							|| (this._StatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatType.Entity = null;
						previousValue.StatTeamWeekTotals.Remove(this);
					}
					this._StatType.Entity = value;
					if ((value != null))
					{
						value.StatTeamWeekTotals.Add(this);
						this._stat_type_id = value.stat_type_id;
					}
					else
					{
						this._stat_type_id = default(int);
					}
					this.SendPropertyChanged("StatType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NBAWeeklyPlayerStats")]
	public partial class NBAWeeklyPlayerStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _player_key;
		
		private string _team_key;
		
		private System.Nullable<int> _week_id;
		
		private System.Nullable<int> _games_played;
		
		private System.Nullable<int> _games_missed;
		
		private string _position;
		
		private EntitySet<StatPlayerWeekTotal> _StatPlayerWeekTotals;
		
		private EntityRef<PlayerInfo> _PlayerInfo;
		
		private EntityRef<TeamInfo> _TeamInfo;
		
		private EntityRef<WeekInfo> _WeekInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onplayer_keyChanging(string value);
    partial void Onplayer_keyChanged();
    partial void Onteam_keyChanging(string value);
    partial void Onteam_keyChanged();
    partial void Onweek_idChanging(System.Nullable<int> value);
    partial void Onweek_idChanged();
    partial void Ongames_playedChanging(System.Nullable<int> value);
    partial void Ongames_playedChanged();
    partial void Ongames_missedChanging(System.Nullable<int> value);
    partial void Ongames_missedChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    #endregion
		
		public NBAWeeklyPlayerStat()
		{
			this._StatPlayerWeekTotals = new EntitySet<StatPlayerWeekTotal>(new Action<StatPlayerWeekTotal>(this.attach_StatPlayerWeekTotals), new Action<StatPlayerWeekTotal>(this.detach_StatPlayerWeekTotals));
			this._PlayerInfo = default(EntityRef<PlayerInfo>);
			this._TeamInfo = default(EntityRef<TeamInfo>);
			this._WeekInfo = default(EntityRef<WeekInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string player_key
		{
			get
			{
				return this._player_key;
			}
			set
			{
				if ((this._player_key != value))
				{
					if (this._PlayerInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer_keyChanging(value);
					this.SendPropertyChanging();
					this._player_key = value;
					this.SendPropertyChanged("player_key");
					this.Onplayer_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_key", DbType="NVarChar(50)")]
		public string team_key
		{
			get
			{
				return this._team_key;
			}
			set
			{
				if ((this._team_key != value))
				{
					if (this._TeamInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_keyChanging(value);
					this.SendPropertyChanging();
					this._team_key = value;
					this.SendPropertyChanged("team_key");
					this.Onteam_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_week_id", DbType="Int")]
		public System.Nullable<int> week_id
		{
			get
			{
				return this._week_id;
			}
			set
			{
				if ((this._week_id != value))
				{
					if (this._WeekInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweek_idChanging(value);
					this.SendPropertyChanging();
					this._week_id = value;
					this.SendPropertyChanged("week_id");
					this.Onweek_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_games_played", DbType="Int")]
		public System.Nullable<int> games_played
		{
			get
			{
				return this._games_played;
			}
			set
			{
				if ((this._games_played != value))
				{
					this.Ongames_playedChanging(value);
					this.SendPropertyChanging();
					this._games_played = value;
					this.SendPropertyChanged("games_played");
					this.Ongames_playedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_games_missed", DbType="Int")]
		public System.Nullable<int> games_missed
		{
			get
			{
				return this._games_missed;
			}
			set
			{
				if ((this._games_missed != value))
				{
					this.Ongames_missedChanging(value);
					this.SendPropertyChanging();
					this._games_missed = value;
					this.SendPropertyChanged("games_missed");
					this.Ongames_missedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(10)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAWeeklyPlayerStat_StatPlayerWeekTotal", Storage="_StatPlayerWeekTotals", ThisKey="id", OtherKey="nba_weekly_player_id")]
		public EntitySet<StatPlayerWeekTotal> StatPlayerWeekTotals
		{
			get
			{
				return this._StatPlayerWeekTotals;
			}
			set
			{
				this._StatPlayerWeekTotals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_NBAWeeklyPlayerStat", Storage="_PlayerInfo", ThisKey="player_key", OtherKey="player_key", IsForeignKey=true)]
		public PlayerInfo PlayerInfo
		{
			get
			{
				return this._PlayerInfo.Entity;
			}
			set
			{
				PlayerInfo previousValue = this._PlayerInfo.Entity;
				if (((previousValue != value) 
							|| (this._PlayerInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerInfo.Entity = null;
						previousValue.NBAWeeklyPlayerStats.Remove(this);
					}
					this._PlayerInfo.Entity = value;
					if ((value != null))
					{
						value.NBAWeeklyPlayerStats.Add(this);
						this._player_key = value.player_key;
					}
					else
					{
						this._player_key = default(string);
					}
					this.SendPropertyChanged("PlayerInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_NBAWeeklyPlayerStat", Storage="_TeamInfo", ThisKey="team_key", OtherKey="team_key", IsForeignKey=true)]
		public TeamInfo TeamInfo
		{
			get
			{
				return this._TeamInfo.Entity;
			}
			set
			{
				TeamInfo previousValue = this._TeamInfo.Entity;
				if (((previousValue != value) 
							|| (this._TeamInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamInfo.Entity = null;
						previousValue.NBAWeeklyPlayerStats.Remove(this);
					}
					this._TeamInfo.Entity = value;
					if ((value != null))
					{
						value.NBAWeeklyPlayerStats.Add(this);
						this._team_key = value.team_key;
					}
					else
					{
						this._team_key = default(string);
					}
					this.SendPropertyChanged("TeamInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_NBAWeeklyPlayerStat", Storage="_WeekInfo", ThisKey="week_id", OtherKey="id", IsForeignKey=true)]
		public WeekInfo WeekInfo
		{
			get
			{
				return this._WeekInfo.Entity;
			}
			set
			{
				WeekInfo previousValue = this._WeekInfo.Entity;
				if (((previousValue != value) 
							|| (this._WeekInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeekInfo.Entity = null;
						previousValue.NBAWeeklyPlayerStats.Remove(this);
					}
					this._WeekInfo.Entity = value;
					if ((value != null))
					{
						value.NBAWeeklyPlayerStats.Add(this);
						this._week_id = value.id;
					}
					else
					{
						this._week_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("WeekInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatPlayerWeekTotals(StatPlayerWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.NBAWeeklyPlayerStat = this;
		}
		
		private void detach_StatPlayerWeekTotals(StatPlayerWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.NBAWeeklyPlayerStat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NBAWeeklyTeamStats")]
	public partial class NBAWeeklyTeamStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _team_key;
		
		private System.Nullable<int> _week_id;
		
		private System.Nullable<int> _games_played;
		
		private System.Nullable<int> _games_missed;
		
		private EntitySet<StatTeamWeekTotal> _StatTeamWeekTotals;
		
		private EntityRef<TeamInfo> _TeamInfo;
		
		private EntityRef<WeekInfo> _WeekInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onteam_keyChanging(string value);
    partial void Onteam_keyChanged();
    partial void Onweek_idChanging(System.Nullable<int> value);
    partial void Onweek_idChanged();
    partial void Ongames_playedChanging(System.Nullable<int> value);
    partial void Ongames_playedChanged();
    partial void Ongames_missedChanging(System.Nullable<int> value);
    partial void Ongames_missedChanged();
    #endregion
		
		public NBAWeeklyTeamStat()
		{
			this._StatTeamWeekTotals = new EntitySet<StatTeamWeekTotal>(new Action<StatTeamWeekTotal>(this.attach_StatTeamWeekTotals), new Action<StatTeamWeekTotal>(this.detach_StatTeamWeekTotals));
			this._TeamInfo = default(EntityRef<TeamInfo>);
			this._WeekInfo = default(EntityRef<WeekInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_key", DbType="NVarChar(50)")]
		public string team_key
		{
			get
			{
				return this._team_key;
			}
			set
			{
				if ((this._team_key != value))
				{
					if (this._TeamInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_keyChanging(value);
					this.SendPropertyChanging();
					this._team_key = value;
					this.SendPropertyChanged("team_key");
					this.Onteam_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_week_id", DbType="Int")]
		public System.Nullable<int> week_id
		{
			get
			{
				return this._week_id;
			}
			set
			{
				if ((this._week_id != value))
				{
					if (this._WeekInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweek_idChanging(value);
					this.SendPropertyChanging();
					this._week_id = value;
					this.SendPropertyChanged("week_id");
					this.Onweek_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_games_played", DbType="Int")]
		public System.Nullable<int> games_played
		{
			get
			{
				return this._games_played;
			}
			set
			{
				if ((this._games_played != value))
				{
					this.Ongames_playedChanging(value);
					this.SendPropertyChanging();
					this._games_played = value;
					this.SendPropertyChanged("games_played");
					this.Ongames_playedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_games_missed", DbType="Int")]
		public System.Nullable<int> games_missed
		{
			get
			{
				return this._games_missed;
			}
			set
			{
				if ((this._games_missed != value))
				{
					this.Ongames_missedChanging(value);
					this.SendPropertyChanging();
					this._games_missed = value;
					this.SendPropertyChanged("games_missed");
					this.Ongames_missedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAWeeklyTeamStat_StatTeamWeekTotal", Storage="_StatTeamWeekTotals", ThisKey="id", OtherKey="nba_weekly_team_id")]
		public EntitySet<StatTeamWeekTotal> StatTeamWeekTotals
		{
			get
			{
				return this._StatTeamWeekTotals;
			}
			set
			{
				this._StatTeamWeekTotals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_NBAWeeklyTeamStat", Storage="_TeamInfo", ThisKey="team_key", OtherKey="team_key", IsForeignKey=true)]
		public TeamInfo TeamInfo
		{
			get
			{
				return this._TeamInfo.Entity;
			}
			set
			{
				TeamInfo previousValue = this._TeamInfo.Entity;
				if (((previousValue != value) 
							|| (this._TeamInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamInfo.Entity = null;
						previousValue.NBAWeeklyTeamStats.Remove(this);
					}
					this._TeamInfo.Entity = value;
					if ((value != null))
					{
						value.NBAWeeklyTeamStats.Add(this);
						this._team_key = value.team_key;
					}
					else
					{
						this._team_key = default(string);
					}
					this.SendPropertyChanged("TeamInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_NBAWeeklyTeamStat", Storage="_WeekInfo", ThisKey="week_id", OtherKey="id", IsForeignKey=true)]
		public WeekInfo WeekInfo
		{
			get
			{
				return this._WeekInfo.Entity;
			}
			set
			{
				WeekInfo previousValue = this._WeekInfo.Entity;
				if (((previousValue != value) 
							|| (this._WeekInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeekInfo.Entity = null;
						previousValue.NBAWeeklyTeamStats.Remove(this);
					}
					this._WeekInfo.Entity = value;
					if ((value != null))
					{
						value.NBAWeeklyTeamStats.Add(this);
						this._week_id = value.id;
					}
					else
					{
						this._week_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("WeekInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatTeamWeekTotals(StatTeamWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.NBAWeeklyTeamStat = this;
		}
		
		private void detach_StatTeamWeekTotals(StatTeamWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.NBAWeeklyTeamStat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NBAAdvWeeklyPlayerStats")]
	public partial class NBAAdvWeeklyPlayerStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _player_key;
		
		private string _team_key;
		
		private System.Nullable<int> _week_id;
		
		private System.Nullable<decimal> _pct_contribution;
		
		private System.Nullable<decimal> _wins;
		
		private System.Nullable<decimal> _win_share_contribution;
		
		private System.Nullable<decimal> _wins_responsibility;
		
		private EntitySet<StatAdvPlayerWeek> _StatAdvPlayerWeeks;
		
		private EntityRef<PlayerInfo> _PlayerInfo;
		
		private EntityRef<TeamInfo> _TeamInfo;
		
		private EntityRef<WeekInfo> _WeekInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onplayer_keyChanging(string value);
    partial void Onplayer_keyChanged();
    partial void Onteam_keyChanging(string value);
    partial void Onteam_keyChanged();
    partial void Onweek_idChanging(System.Nullable<int> value);
    partial void Onweek_idChanged();
    partial void Onpct_contributionChanging(System.Nullable<decimal> value);
    partial void Onpct_contributionChanged();
    partial void OnwinsChanging(System.Nullable<decimal> value);
    partial void OnwinsChanged();
    partial void Onwin_share_contributionChanging(System.Nullable<decimal> value);
    partial void Onwin_share_contributionChanged();
    partial void Onwins_responsibilityChanging(System.Nullable<decimal> value);
    partial void Onwins_responsibilityChanged();
    #endregion
		
		public NBAAdvWeeklyPlayerStat()
		{
			this._StatAdvPlayerWeeks = new EntitySet<StatAdvPlayerWeek>(new Action<StatAdvPlayerWeek>(this.attach_StatAdvPlayerWeeks), new Action<StatAdvPlayerWeek>(this.detach_StatAdvPlayerWeeks));
			this._PlayerInfo = default(EntityRef<PlayerInfo>);
			this._TeamInfo = default(EntityRef<TeamInfo>);
			this._WeekInfo = default(EntityRef<WeekInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_key", DbType="NVarChar(50)")]
		public string player_key
		{
			get
			{
				return this._player_key;
			}
			set
			{
				if ((this._player_key != value))
				{
					if (this._PlayerInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer_keyChanging(value);
					this.SendPropertyChanging();
					this._player_key = value;
					this.SendPropertyChanged("player_key");
					this.Onplayer_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_team_key", DbType="NVarChar(50)")]
		public string team_key
		{
			get
			{
				return this._team_key;
			}
			set
			{
				if ((this._team_key != value))
				{
					if (this._TeamInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onteam_keyChanging(value);
					this.SendPropertyChanging();
					this._team_key = value;
					this.SendPropertyChanged("team_key");
					this.Onteam_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_week_id", DbType="Int")]
		public System.Nullable<int> week_id
		{
			get
			{
				return this._week_id;
			}
			set
			{
				if ((this._week_id != value))
				{
					if (this._WeekInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onweek_idChanging(value);
					this.SendPropertyChanging();
					this._week_id = value;
					this.SendPropertyChanged("week_id");
					this.Onweek_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pct_contribution", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> pct_contribution
		{
			get
			{
				return this._pct_contribution;
			}
			set
			{
				if ((this._pct_contribution != value))
				{
					this.Onpct_contributionChanging(value);
					this.SendPropertyChanging();
					this._pct_contribution = value;
					this.SendPropertyChanged("pct_contribution");
					this.Onpct_contributionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wins", DbType="Decimal(3,1)")]
		public System.Nullable<decimal> wins
		{
			get
			{
				return this._wins;
			}
			set
			{
				if ((this._wins != value))
				{
					this.OnwinsChanging(value);
					this.SendPropertyChanging();
					this._wins = value;
					this.SendPropertyChanged("wins");
					this.OnwinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win_share_contribution", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> win_share_contribution
		{
			get
			{
				return this._win_share_contribution;
			}
			set
			{
				if ((this._win_share_contribution != value))
				{
					this.Onwin_share_contributionChanging(value);
					this.SendPropertyChanging();
					this._win_share_contribution = value;
					this.SendPropertyChanged("win_share_contribution");
					this.Onwin_share_contributionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wins_responsibility", DbType="Decimal(10,8)")]
		public System.Nullable<decimal> wins_responsibility
		{
			get
			{
				return this._wins_responsibility;
			}
			set
			{
				if ((this._wins_responsibility != value))
				{
					this.Onwins_responsibilityChanging(value);
					this.SendPropertyChanging();
					this._wins_responsibility = value;
					this.SendPropertyChanged("wins_responsibility");
					this.Onwins_responsibilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAAdvWeeklyPlayerStat_StatAdvPlayerWeek", Storage="_StatAdvPlayerWeeks", ThisKey="id", OtherKey="nba_adv_weekly_player_id")]
		public EntitySet<StatAdvPlayerWeek> StatAdvPlayerWeeks
		{
			get
			{
				return this._StatAdvPlayerWeeks;
			}
			set
			{
				this._StatAdvPlayerWeeks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_NBAAdvWeeklyPlayerStat", Storage="_PlayerInfo", ThisKey="player_key", OtherKey="player_key", IsForeignKey=true)]
		public PlayerInfo PlayerInfo
		{
			get
			{
				return this._PlayerInfo.Entity;
			}
			set
			{
				PlayerInfo previousValue = this._PlayerInfo.Entity;
				if (((previousValue != value) 
							|| (this._PlayerInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerInfo.Entity = null;
						previousValue.NBAAdvWeeklyPlayerStats.Remove(this);
					}
					this._PlayerInfo.Entity = value;
					if ((value != null))
					{
						value.NBAAdvWeeklyPlayerStats.Add(this);
						this._player_key = value.player_key;
					}
					else
					{
						this._player_key = default(string);
					}
					this.SendPropertyChanged("PlayerInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamInfo_NBAAdvWeeklyPlayerStat", Storage="_TeamInfo", ThisKey="team_key", OtherKey="team_key", IsForeignKey=true)]
		public TeamInfo TeamInfo
		{
			get
			{
				return this._TeamInfo.Entity;
			}
			set
			{
				TeamInfo previousValue = this._TeamInfo.Entity;
				if (((previousValue != value) 
							|| (this._TeamInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamInfo.Entity = null;
						previousValue.NBAAdvWeeklyPlayerStats.Remove(this);
					}
					this._TeamInfo.Entity = value;
					if ((value != null))
					{
						value.NBAAdvWeeklyPlayerStats.Add(this);
						this._team_key = value.team_key;
					}
					else
					{
						this._team_key = default(string);
					}
					this.SendPropertyChanged("TeamInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekInfo_NBAAdvWeeklyPlayerStat", Storage="_WeekInfo", ThisKey="week_id", OtherKey="id", IsForeignKey=true)]
		public WeekInfo WeekInfo
		{
			get
			{
				return this._WeekInfo.Entity;
			}
			set
			{
				WeekInfo previousValue = this._WeekInfo.Entity;
				if (((previousValue != value) 
							|| (this._WeekInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeekInfo.Entity = null;
						previousValue.NBAAdvWeeklyPlayerStats.Remove(this);
					}
					this._WeekInfo.Entity = value;
					if ((value != null))
					{
						value.NBAAdvWeeklyPlayerStats.Add(this);
						this._week_id = value.id;
					}
					else
					{
						this._week_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("WeekInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatAdvPlayerWeeks(StatAdvPlayerWeek entity)
		{
			this.SendPropertyChanging();
			entity.NBAAdvWeeklyPlayerStat = this;
		}
		
		private void detach_StatAdvPlayerWeeks(StatAdvPlayerWeek entity)
		{
			this.SendPropertyChanging();
			entity.NBAAdvWeeklyPlayerStat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NBAAdvTotalPlayerStats")]
	public partial class NBAAdvTotalPlayerStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _player_key;
		
		private string _league_key;
		
		private System.Nullable<int> _weeks_started;
		
		private System.Nullable<decimal> _percentage;
		
		private System.Nullable<decimal> _wins;
		
		private System.Nullable<decimal> _win_shares_contribution;
		
		private System.Nullable<decimal> _win_shares_contribution_per_start;
		
		private System.Nullable<decimal> _win_shares_contribution_per_win;
		
		private System.Nullable<decimal> _player_win_pct;
		
		private EntitySet<StatAdvPlayerSeason> _StatAdvPlayerSeasons;
		
		private EntityRef<LeagueInfo> _LeagueInfo;
		
		private EntityRef<PlayerInfo> _PlayerInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onplayer_keyChanging(string value);
    partial void Onplayer_keyChanged();
    partial void Onleague_keyChanging(string value);
    partial void Onleague_keyChanged();
    partial void Onweeks_startedChanging(System.Nullable<int> value);
    partial void Onweeks_startedChanged();
    partial void OnpercentageChanging(System.Nullable<decimal> value);
    partial void OnpercentageChanged();
    partial void OnwinsChanging(System.Nullable<decimal> value);
    partial void OnwinsChanged();
    partial void Onwin_shares_contributionChanging(System.Nullable<decimal> value);
    partial void Onwin_shares_contributionChanged();
    partial void Onwin_shares_contribution_per_startChanging(System.Nullable<decimal> value);
    partial void Onwin_shares_contribution_per_startChanged();
    partial void Onwin_shares_contribution_per_winChanging(System.Nullable<decimal> value);
    partial void Onwin_shares_contribution_per_winChanged();
    partial void Onplayer_win_pctChanging(System.Nullable<decimal> value);
    partial void Onplayer_win_pctChanged();
    #endregion
		
		public NBAAdvTotalPlayerStat()
		{
			this._StatAdvPlayerSeasons = new EntitySet<StatAdvPlayerSeason>(new Action<StatAdvPlayerSeason>(this.attach_StatAdvPlayerSeasons), new Action<StatAdvPlayerSeason>(this.detach_StatAdvPlayerSeasons));
			this._LeagueInfo = default(EntityRef<LeagueInfo>);
			this._PlayerInfo = default(EntityRef<PlayerInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_key", DbType="NVarChar(50)")]
		public string player_key
		{
			get
			{
				return this._player_key;
			}
			set
			{
				if ((this._player_key != value))
				{
					if (this._PlayerInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onplayer_keyChanging(value);
					this.SendPropertyChanging();
					this._player_key = value;
					this.SendPropertyChanged("player_key");
					this.Onplayer_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_league_key", DbType="NVarChar(50)")]
		public string league_key
		{
			get
			{
				return this._league_key;
			}
			set
			{
				if ((this._league_key != value))
				{
					if (this._LeagueInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onleague_keyChanging(value);
					this.SendPropertyChanging();
					this._league_key = value;
					this.SendPropertyChanged("league_key");
					this.Onleague_keyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weeks_started", DbType="Int")]
		public System.Nullable<int> weeks_started
		{
			get
			{
				return this._weeks_started;
			}
			set
			{
				if ((this._weeks_started != value))
				{
					this.Onweeks_startedChanging(value);
					this.SendPropertyChanging();
					this._weeks_started = value;
					this.SendPropertyChanged("weeks_started");
					this.Onweeks_startedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentage", DbType="Decimal(13,8)")]
		public System.Nullable<decimal> percentage
		{
			get
			{
				return this._percentage;
			}
			set
			{
				if ((this._percentage != value))
				{
					this.OnpercentageChanging(value);
					this.SendPropertyChanging();
					this._percentage = value;
					this.SendPropertyChanged("percentage");
					this.OnpercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wins", DbType="Decimal(5,1)")]
		public System.Nullable<decimal> wins
		{
			get
			{
				return this._wins;
			}
			set
			{
				if ((this._wins != value))
				{
					this.OnwinsChanging(value);
					this.SendPropertyChanging();
					this._wins = value;
					this.SendPropertyChanged("wins");
					this.OnwinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win_shares_contribution", DbType="Decimal(13,8)")]
		public System.Nullable<decimal> win_shares_contribution
		{
			get
			{
				return this._win_shares_contribution;
			}
			set
			{
				if ((this._win_shares_contribution != value))
				{
					this.Onwin_shares_contributionChanging(value);
					this.SendPropertyChanging();
					this._win_shares_contribution = value;
					this.SendPropertyChanged("win_shares_contribution");
					this.Onwin_shares_contributionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win_shares_contribution_per_start", DbType="Decimal(13,8)")]
		public System.Nullable<decimal> win_shares_contribution_per_start
		{
			get
			{
				return this._win_shares_contribution_per_start;
			}
			set
			{
				if ((this._win_shares_contribution_per_start != value))
				{
					this.Onwin_shares_contribution_per_startChanging(value);
					this.SendPropertyChanging();
					this._win_shares_contribution_per_start = value;
					this.SendPropertyChanged("win_shares_contribution_per_start");
					this.Onwin_shares_contribution_per_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_win_shares_contribution_per_win", DbType="Decimal(13,8)")]
		public System.Nullable<decimal> win_shares_contribution_per_win
		{
			get
			{
				return this._win_shares_contribution_per_win;
			}
			set
			{
				if ((this._win_shares_contribution_per_win != value))
				{
					this.Onwin_shares_contribution_per_winChanging(value);
					this.SendPropertyChanging();
					this._win_shares_contribution_per_win = value;
					this.SendPropertyChanged("win_shares_contribution_per_win");
					this.Onwin_shares_contribution_per_winChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_player_win_pct", DbType="Decimal(13,8)")]
		public System.Nullable<decimal> player_win_pct
		{
			get
			{
				return this._player_win_pct;
			}
			set
			{
				if ((this._player_win_pct != value))
				{
					this.Onplayer_win_pctChanging(value);
					this.SendPropertyChanging();
					this._player_win_pct = value;
					this.SendPropertyChanged("player_win_pct");
					this.Onplayer_win_pctChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NBAAdvTotalPlayerStat_StatAdvPlayerSeason", Storage="_StatAdvPlayerSeasons", ThisKey="id", OtherKey="nba_adv_total_player_id")]
		public EntitySet<StatAdvPlayerSeason> StatAdvPlayerSeasons
		{
			get
			{
				return this._StatAdvPlayerSeasons;
			}
			set
			{
				this._StatAdvPlayerSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueInfo_NBAAdvTotalPlayerStat", Storage="_LeagueInfo", ThisKey="league_key", OtherKey="league_key", IsForeignKey=true)]
		public LeagueInfo LeagueInfo
		{
			get
			{
				return this._LeagueInfo.Entity;
			}
			set
			{
				LeagueInfo previousValue = this._LeagueInfo.Entity;
				if (((previousValue != value) 
							|| (this._LeagueInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueInfo.Entity = null;
						previousValue.NBAAdvTotalPlayerStats.Remove(this);
					}
					this._LeagueInfo.Entity = value;
					if ((value != null))
					{
						value.NBAAdvTotalPlayerStats.Add(this);
						this._league_key = value.league_key;
					}
					else
					{
						this._league_key = default(string);
					}
					this.SendPropertyChanged("LeagueInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_NBAAdvTotalPlayerStat", Storage="_PlayerInfo", ThisKey="player_key", OtherKey="player_key", IsForeignKey=true)]
		public PlayerInfo PlayerInfo
		{
			get
			{
				return this._PlayerInfo.Entity;
			}
			set
			{
				PlayerInfo previousValue = this._PlayerInfo.Entity;
				if (((previousValue != value) 
							|| (this._PlayerInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerInfo.Entity = null;
						previousValue.NBAAdvTotalPlayerStats.Remove(this);
					}
					this._PlayerInfo.Entity = value;
					if ((value != null))
					{
						value.NBAAdvTotalPlayerStats.Add(this);
						this._player_key = value.player_key;
					}
					else
					{
						this._player_key = default(string);
					}
					this.SendPropertyChanged("PlayerInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatAdvPlayerSeasons(StatAdvPlayerSeason entity)
		{
			this.SendPropertyChanging();
			entity.NBAAdvTotalPlayerStat = this;
		}
		
		private void detach_StatAdvPlayerSeasons(StatAdvPlayerSeason entity)
		{
			this.SendPropertyChanging();
			entity.NBAAdvTotalPlayerStat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatType")]
	public partial class StatType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stat_type_id;
		
		private string _description;
		
		private string _long_abbr;
		
		private string _short_abbr;
		
		private EntitySet<StatAdvPlayerSeason> _StatAdvPlayerSeasons;
		
		private EntitySet<StatAdvPlayerWeek> _StatAdvPlayerWeeks;
		
		private EntitySet<StatPlayerWeekTotal> _StatPlayerWeekTotals;
		
		private EntitySet<StatTeamWeekTotal> _StatTeamWeekTotals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstat_type_idChanging(int value);
    partial void Onstat_type_idChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onlong_abbrChanging(string value);
    partial void Onlong_abbrChanged();
    partial void Onshort_abbrChanging(string value);
    partial void Onshort_abbrChanged();
    #endregion
		
		public StatType()
		{
			this._StatAdvPlayerSeasons = new EntitySet<StatAdvPlayerSeason>(new Action<StatAdvPlayerSeason>(this.attach_StatAdvPlayerSeasons), new Action<StatAdvPlayerSeason>(this.detach_StatAdvPlayerSeasons));
			this._StatAdvPlayerWeeks = new EntitySet<StatAdvPlayerWeek>(new Action<StatAdvPlayerWeek>(this.attach_StatAdvPlayerWeeks), new Action<StatAdvPlayerWeek>(this.detach_StatAdvPlayerWeeks));
			this._StatPlayerWeekTotals = new EntitySet<StatPlayerWeekTotal>(new Action<StatPlayerWeekTotal>(this.attach_StatPlayerWeekTotals), new Action<StatPlayerWeekTotal>(this.detach_StatPlayerWeekTotals));
			this._StatTeamWeekTotals = new EntitySet<StatTeamWeekTotal>(new Action<StatTeamWeekTotal>(this.attach_StatTeamWeekTotals), new Action<StatTeamWeekTotal>(this.detach_StatTeamWeekTotals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stat_type_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int stat_type_id
		{
			get
			{
				return this._stat_type_id;
			}
			set
			{
				if ((this._stat_type_id != value))
				{
					this.Onstat_type_idChanging(value);
					this.SendPropertyChanging();
					this._stat_type_id = value;
					this.SendPropertyChanged("stat_type_id");
					this.Onstat_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_long_abbr", DbType="NChar(5)")]
		public string long_abbr
		{
			get
			{
				return this._long_abbr;
			}
			set
			{
				if ((this._long_abbr != value))
				{
					this.Onlong_abbrChanging(value);
					this.SendPropertyChanging();
					this._long_abbr = value;
					this.SendPropertyChanged("long_abbr");
					this.Onlong_abbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_short_abbr", DbType="NChar(3)")]
		public string short_abbr
		{
			get
			{
				return this._short_abbr;
			}
			set
			{
				if ((this._short_abbr != value))
				{
					this.Onshort_abbrChanging(value);
					this.SendPropertyChanging();
					this._short_abbr = value;
					this.SendPropertyChanged("short_abbr");
					this.Onshort_abbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatAdvPlayerSeason", Storage="_StatAdvPlayerSeasons", ThisKey="stat_type_id", OtherKey="stat_type_id")]
		public EntitySet<StatAdvPlayerSeason> StatAdvPlayerSeasons
		{
			get
			{
				return this._StatAdvPlayerSeasons;
			}
			set
			{
				this._StatAdvPlayerSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatAdvPlayerWeek", Storage="_StatAdvPlayerWeeks", ThisKey="stat_type_id", OtherKey="stat_type_id")]
		public EntitySet<StatAdvPlayerWeek> StatAdvPlayerWeeks
		{
			get
			{
				return this._StatAdvPlayerWeeks;
			}
			set
			{
				this._StatAdvPlayerWeeks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatPlayerWeekTotal", Storage="_StatPlayerWeekTotals", ThisKey="stat_type_id", OtherKey="stat_type_id")]
		public EntitySet<StatPlayerWeekTotal> StatPlayerWeekTotals
		{
			get
			{
				return this._StatPlayerWeekTotals;
			}
			set
			{
				this._StatPlayerWeekTotals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_StatTeamWeekTotal", Storage="_StatTeamWeekTotals", ThisKey="stat_type_id", OtherKey="stat_type_id")]
		public EntitySet<StatTeamWeekTotal> StatTeamWeekTotals
		{
			get
			{
				return this._StatTeamWeekTotals;
			}
			set
			{
				this._StatTeamWeekTotals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StatAdvPlayerSeasons(StatAdvPlayerSeason entity)
		{
			this.SendPropertyChanging();
			entity.StatType = this;
		}
		
		private void detach_StatAdvPlayerSeasons(StatAdvPlayerSeason entity)
		{
			this.SendPropertyChanging();
			entity.StatType = null;
		}
		
		private void attach_StatAdvPlayerWeeks(StatAdvPlayerWeek entity)
		{
			this.SendPropertyChanging();
			entity.StatType = this;
		}
		
		private void detach_StatAdvPlayerWeeks(StatAdvPlayerWeek entity)
		{
			this.SendPropertyChanging();
			entity.StatType = null;
		}
		
		private void attach_StatPlayerWeekTotals(StatPlayerWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.StatType = this;
		}
		
		private void detach_StatPlayerWeekTotals(StatPlayerWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.StatType = null;
		}
		
		private void attach_StatTeamWeekTotals(StatTeamWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.StatType = this;
		}
		
		private void detach_StatTeamWeekTotals(StatTeamWeekTotal entity)
		{
			this.SendPropertyChanging();
			entity.StatType = null;
		}
	}
}
#pragma warning restore 1591
